#!/bin/bash -e

# This script is designed to make it easier to spin up multiple copies of the same
# Terraform stack, such as dev / staging / prod, or two replicas in different regions.
# Using modules from within a whole-environment stack for this purpose would make it
# harder to delegate the management of a stack to the developers who look after the code.
#
# The script exists because remote state configuration cannot be configured using
# ordinary terraform variables, and GCS bucket names are globally unique, and changing
# the remote state config or the provider project requires a terraform init.
#
# Workspaces would accomplish most of what this script does, but they have some limitations.
# All the state files are stored together in the same location, therefore an user who can
# apply the dev stack will also need write access to the prod remote state file.
# Users of workspaces must also take care to select the correct one before running plan/apply.

function usage() {
    cat - >&2 <<EOF
Usage: $0 CONFIG_DIR terraform_args...

t7m is a simple wrapper around Terraform that helps manage multiple instances of
the same terraform stack using variable files and uniquely prefixed remote states.
It exists to reduce the need to type long command line arguments.

Examples:

    t7m foo/bar plan
    t7m foo/bar apply -auto-approve

In the above examples, the vars file 'foo/bar.tfvars' will be used and must exist.
EOF
    exit 1
}

if [[ -z "$1" || -z "$2" ]]; then
    usage
fi

CONFIG_BASE=$1
TERRAFORM_COMMAND=$2
STACK_NAME=`basename $PWD`
VAR_FILE="$CONFIG_BASE.tfvars"
REMOTE_STATE_PREFIX="$STACK_NAME/$CONFIG_BASE"

if [[ ! -f "$VAR_FILE" ]]; then
    echo "Terraform variables file $VAR_FILE not found" >&2
    usage
fi

shift 2

echo "Using remote state prefix '$REMOTE_STATE_PREFIX' and vars file '$VAR_FILE'."
set -x
terraform init -backend-config="prefix=$REMOTE_STATE_PREFIX" < /dev/null

case $TERRAFORM_COMMAND in
    state) terraform $TERRAFORM_COMMAND $* ;;
    apply) terraform $TERRAFORM_COMMAND -var-file="$VAR_FILE" -input=false $*;;
    *) terraform $TERRAFORM_COMMAND -var-file="$VAR_FILE" $* ;;
esac
